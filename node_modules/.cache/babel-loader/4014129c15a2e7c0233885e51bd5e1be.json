{"ast":null,"code":"var _jsxFileName = \"/media/donald/C/private-mint-frontend/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport { Snackbar, Paper } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { toDate, getAtaForMint } from './utils';\nimport { MintButton } from './MintButton';\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken, CANDY_MACHINE_PROGRAM } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS.toString() : 9;\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n_c = WalletContainer;\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n_c2 = WalletAmount;\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n_c3 = Wallet;\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n_c4 = ConnectButton;\nconst Card = styled(Paper)`\n  display: inline-block;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n_c5 = Card;\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #3f7eeb;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #3f7eeb;\n    }\n  }\n`;\n_c6 = MintButtonContainer;\nconst Logo = styled.div`\n  flex: 0 0 auto;\n\n  img {\n    height: 60px;\n  }\n`;\n_c7 = Logo;\nconst Menu = styled.ul`\n  list-style: none;\n  display: inline-flex;\n  flex: 1 0 auto;\n\n  li {\n    margin: 0 12px;\n\n    a {\n      color: var(--main-text-color);\n      list-style-image: none;\n      list-style-position: outside;\n      list-style-type: none;\n      outline: none;\n      text-decoration: none;\n      text-size-adjust: 100%;\n      touch-action: manipulation;\n      transition: color 0.3s;\n      padding-bottom: 15px;\n\n      img {\n        max-height: 26px;\n      }\n    }\n\n    a:hover, a:active {\n      color: rgb(131, 146, 161);\n      border-bottom: 4px solid var(--title-text-color);\n    }\n\n  }\n`;\n_c8 = Menu;\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n_c9 = SolExplorerLink;\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n  background: \"blue\";\n`;\n_c10 = MainContainer;\nconst blacklist = [];\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state$e, _candyMachine$state2, _candyMachine$state2$;\n\n  const [balance, setBalance] = useState();\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState(\"\");\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [isSoldOut, setIsSoldOut] = useState(false);\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\n  const [price, setPrice] = useState(0);\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n  const [isBurnToken, setIsBurnToken] = useState(false);\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n  const [isEnded, setIsEnded] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [isPresale, setIsPresale] = useState(false);\n  const [isWLOnly, setIsWLOnly] = useState(false);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState();\n  const rpcUrl = props.rpcHost;\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      var _cndy$state$endSettin, _cndy$state$endSettin2;\n\n      if (!wallet) return;\n      const cndy = await getCandyMachineState(wallet, props.candyMachineId, props.connection);\n      setCandyMachine(cndy);\n      setItemsAvailable(cndy.state.itemsAvailable);\n      setItemsRemaining(cndy.state.itemsRemaining);\n      setItemsRedeemed(cndy.state.itemsRedeemed);\n      var divider = 1;\n\n      if (decimals) {\n        divider = +('1' + new Array(decimals).join('0').slice() + '0');\n      } // detect if using spl-token to mint\n\n\n      if (cndy.state.tokenMint) {\n        setPayWithSplToken(true); // Customize your SPL-TOKEN Label HERE\n        // TODO: get spl-token metadata name\n\n        setPrice(cndy.state.price.toNumber() / divider);\n        setWhitelistPrice(cndy.state.price.toNumber() / divider);\n      } else {\n        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n      } // fetch whitelist token balance\n\n\n      if (cndy.state.whitelistMintSettings) {\n        setWhitelistEnabled(true);\n        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n        setIsPresale(cndy.state.whitelistMintSettings.presale);\n        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n          if (cndy.state.tokenMint) {\n            var _cndy$state$whitelist;\n\n            setWhitelistPrice(((_cndy$state$whitelist = cndy.state.whitelistMintSettings.discountPrice) === null || _cndy$state$whitelist === void 0 ? void 0 : _cndy$state$whitelist.toNumber()) / divider);\n          } else {\n            var _cndy$state$whitelist2;\n\n            setWhitelistPrice(((_cndy$state$whitelist2 = cndy.state.whitelistMintSettings.discountPrice) === null || _cndy$state$whitelist2 === void 0 ? void 0 : _cndy$state$whitelist2.toNumber()) / LAMPORTS_PER_SOL);\n          }\n        }\n\n        let balance = 0;\n\n        try {\n          var _tokenBalance$value;\n\n          const tokenBalance = await props.connection.getTokenAccountBalance((await getAtaForMint(cndy.state.whitelistMintSettings.mint, wallet.publicKey))[0]);\n          balance = (tokenBalance === null || tokenBalance === void 0 ? void 0 : (_tokenBalance$value = tokenBalance.value) === null || _tokenBalance$value === void 0 ? void 0 : _tokenBalance$value.uiAmount) || 0;\n        } catch (e) {\n          console.error(e);\n          balance = 0;\n        }\n\n        setWhitelistTokenBalance(balance);\n        setIsActive(isPresale && !isEnded && balance > 0);\n      } else {\n        setWhitelistEnabled(false);\n      } // end the mint when date is reached\n\n\n      if (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$endSettin = cndy.state.endSettings) === null || _cndy$state$endSettin === void 0 ? void 0 : _cndy$state$endSettin.endSettingType.date) {\n        setEndDate(toDate(cndy.state.endSettings.number));\n\n        if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n          setIsEnded(true);\n          setIsActive(false);\n        }\n      } // end the mint when amount is reached\n\n\n      if (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$endSettin2 = cndy.state.endSettings) === null || _cndy$state$endSettin2 === void 0 ? void 0 : _cndy$state$endSettin2.endSettingType.amount) {\n        let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n        setItemsAvailable(limit);\n\n        if (cndy.state.itemsRedeemed < limit) {\n          setItemsRemaining(limit - cndy.state.itemsRedeemed);\n        } else {\n          setItemsRemaining(0);\n          cndy.state.isSoldOut = true;\n          setIsEnded(true);\n        }\n      } else {\n        setItemsRemaining(cndy.state.itemsRemaining);\n      }\n\n      if (cndy.state.isSoldOut) {\n        setIsActive(false);\n      }\n    })();\n  };\n\n  const renderGoLiveDateCounter = ({\n    days,\n    hours,\n    minutes,\n    seconds\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: days\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 38\n        }, this), \"Days\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 84\n        }, this), \"Hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 64\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 49\n        }, this), \"Mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }, this), \"Secs\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderEndDateCounter = ({\n    days,\n    hours,\n    minutes\n  }) => {\n    let label = \"\";\n\n    if (days > 0) {\n      label += days + \" days \";\n    }\n\n    if (hours > 0) {\n      label += hours + \" hours \";\n    }\n\n    label += minutes + 1 + \" minutes left to MINT.\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this);\n  };\n\n  function displaySuccess(mintPublicKey) {\n    let remaining = itemsRemaining - 1;\n    setItemsRemaining(remaining);\n    setIsSoldOut(remaining === 0);\n\n    if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n      let balance = whitelistTokenBalance - 1;\n      setWhitelistTokenBalance(balance);\n      setIsActive(isPresale && !isEnded && balance > 0);\n    }\n\n    setItemsRedeemed(itemsRedeemed + 1);\n    const solFeesEstimation = 0.012; // approx\n\n    if (!payWithSplToken && balance && balance > 0) {\n      setBalance(balance - (whitelistEnabled ? whitelistPrice : price) - solFeesEstimation);\n    }\n\n    setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\" ? \"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster : \"https://solscan.io/token/\" + mintPublicKey);\n    throwConfetti();\n  }\n\n  ;\n\n  function throwConfetti() {\n    confetti({\n      particleCount: 400,\n      spread: 70,\n      origin: {\n        y: 0.6\n      }\n    });\n  }\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n\n      if (wallet && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && wallet.publicKey && blacklist.indexOf(wallet.publicKey.toString()) === -1) {\n        var _status;\n\n        console.log(wallet.publicKey.toString());\n        const mint = anchor.web3.Keypair.generate();\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey, mint))[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, 'singleGossip', true);\n        }\n\n        if (!((_status = status) === null || _status === void 0 ? void 0 : _status.err)) {\n          blacklist.push(wallet.publicKey.toString());\n          console.log(wallet.publicKey.toString());\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success'\n          }); // update front-end amounts\n\n          displaySuccess(mint.publicKey);\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n        }\n      }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x138')) {} else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(refreshCandyMachineState, [wallet, props.candyMachineId, props.connection, isEnded, isPresale]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainContainer, {\n      children: [/*#__PURE__*/_jsxDEV(WalletContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"http://spiritualgoats.com/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"\",\n              src: \"logo.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 106\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          children: wallet ? /*#__PURE__*/_jsxDEV(WalletAmount, {\n            children: [(balance || 0).toLocaleString(), \" SOL\", /*#__PURE__*/_jsxDEV(ConnectButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 80\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(ConnectButton, {\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spiritual Goats Private Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 21\n      }, this), wallet && isActive && whitelistEnabled && whitelistTokenBalance > 0 && isBurnToken && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"You own \", whitelistTokenBalance, \" WL mint \", whitelistTokenBalance > 1 ? \"tokens\" : \"token\", \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 25\n      }, this), wallet && isActive && whitelistEnabled && whitelistTokenBalance > 0 && !isBurnToken && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Whitelisted GOAT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 25\n      }, this), wallet && isActive && !whitelistEnabled && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"0.2 SOL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }, this), wallet && isActive && endDate && Date.now() < endDate.getTime() && /*#__PURE__*/_jsxDEV(Countdown, {\n        date: toDate(candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state = candyMachine.state) === null || _candyMachine$state === void 0 ? void 0 : (_candyMachine$state$e = _candyMachine$state.endSettings) === null || _candyMachine$state$e === void 0 ? void 0 : _candyMachine$state$e.number),\n        onMount: ({\n          completed\n        }) => completed && setIsEnded(true),\n        onComplete: () => {\n          setIsEnded(true);\n        },\n        renderer: renderEndDateCounter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 25\n      }, this), wallet && isActive && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"TOTAL MINTED : \", itemsRedeemed, \" / \", itemsAvailable]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MintButtonContainer, {\n        children: !isActive && !isEnded && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate) && (!isWLOnly || whitelistTokenBalance > 0) ? /*#__PURE__*/_jsxDEV(Countdown, {\n          date: toDate(candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate),\n          onMount: ({\n            completed\n          }) => completed && setIsActive(!isEnded),\n          onComplete: () => {\n            setIsActive(!isEnded);\n          },\n          renderer: renderGoLiveDateCounter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 29\n        }, this) : !wallet ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 37\n        }, this) : !isWLOnly || whitelistTokenBalance > 0 ? (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.gatekeeper) && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n          wallet: {\n            publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n            //@ts-ignore\n            signTransaction: wallet.signTransaction\n          } // // Replace with following when added\n          // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n          ,\n          gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork // This is the ignite (captcha) network\n          /// Don't need this for mainnet\n          ,\n          clusterUrl: rpcUrl,\n          options: {\n            autoShowModal: false\n          },\n          children: /*#__PURE__*/_jsxDEV(MintButton, {\n            candyMachine: candyMachine,\n            isMinting: isMinting,\n            isActive: isActive,\n            isEnded: isEnded,\n            isSoldOut: isSoldOut,\n            onMint: onMint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n          candyMachine: candyMachine,\n          isMinting: isMinting,\n          isActive: isActive,\n          isEnded: isEnded,\n          isSoldOut: isSoldOut,\n          onMint: onMint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Mint is private.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 21\n      }, this), wallet && isActive && solanaExplorerLink && /*#__PURE__*/_jsxDEV(SolExplorerLink, {\n        href: solanaExplorerLink,\n        target: \"_blank\",\n        children: \"View on Solscan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"iGicGUwr0cq6OOT66o+QJnQo/Wg=\", false, function () {\n  return [useAnchorWallet];\n});\n\n_c11 = Home;\nexport default Home;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"WalletContainer\");\n$RefreshReg$(_c2, \"WalletAmount\");\n$RefreshReg$(_c3, \"Wallet\");\n$RefreshReg$(_c4, \"ConnectButton\");\n$RefreshReg$(_c5, \"Card\");\n$RefreshReg$(_c6, \"MintButtonContainer\");\n$RefreshReg$(_c7, \"Logo\");\n$RefreshReg$(_c8, \"Menu\");\n$RefreshReg$(_c9, \"SolExplorerLink\");\n$RefreshReg$(_c10, \"MainContainer\");\n$RefreshReg$(_c11, \"Home\");","map":{"version":3,"sources":["/media/donald/C/private-mint-frontend/src/Home.tsx"],"names":["useEffect","useState","styled","confetti","anchor","LAMPORTS_PER_SOL","PublicKey","useAnchorWallet","WalletMultiButton","GatewayProvider","Countdown","Snackbar","Paper","Alert","toDate","getAtaForMint","MintButton","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","CANDY_MACHINE_PROGRAM","cluster","process","env","REACT_APP_SOLANA_NETWORK","toString","decimals","REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","Card","MintButtonContainer","Logo","Menu","SolExplorerLink","a","MainContainer","blacklist","Home","props","balance","setBalance","isMinting","setIsMinting","isActive","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","isSoldOut","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","isEnded","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","alertState","setAlertState","open","message","severity","undefined","wallet","candyMachine","setCandyMachine","rpcUrl","rpcHost","refreshCandyMachineState","cndy","candyMachineId","connection","state","divider","Array","join","slice","tokenMint","toNumber","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","tokenBalance","getTokenAccountBalance","mint","publicKey","value","uiAmount","e","console","error","endSettings","endSettingType","date","number","Date","getTime","amount","limit","Math","min","renderGoLiveDateCounter","days","hours","minutes","seconds","renderEndDateCounter","label","displaySuccess","mintPublicKey","remaining","solFeesEstimation","throwConfetti","particleCount","spread","origin","y","onMint","program","indexOf","log","web3","Keypair","generate","mintTxId","status","err","txTimeout","push","msg","code","getBalance","toLocaleString","now","completed","goLiveDate","gatekeeper","signTransaction","gatekeeperNetwork","autoShowModal"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {MintButton} from './MintButton';\nimport {\n    CandyMachine,\n    awaitTransactionSignatureConfirmation,\n    getCandyMachineState,\n    mintOneToken,\n    CANDY_MACHINE_PROGRAM,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #3f7eeb;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #3f7eeb;\n    }\n  }\n`;\n\nconst Logo = styled.div`\n  flex: 0 0 auto;\n\n  img {\n    height: 60px;\n  }\n`;\nconst Menu = styled.ul`\n  list-style: none;\n  display: inline-flex;\n  flex: 1 0 auto;\n\n  li {\n    margin: 0 12px;\n\n    a {\n      color: var(--main-text-color);\n      list-style-image: none;\n      list-style-position: outside;\n      list-style-type: none;\n      outline: none;\n      text-decoration: none;\n      text-size-adjust: 100%;\n      touch-action: manipulation;\n      transition: color 0.3s;\n      padding-bottom: 15px;\n\n      img {\n        max-height: 26px;\n      }\n    }\n\n    a:hover, a:active {\n      color: rgb(131, 146, 161);\n      border-bottom: 4px solid var(--title-text-color);\n    }\n\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n  background: \"blue\";\n`;\n\nconst blacklist: string[] = [];\n\nexport interface HomeProps {\n    candyMachineId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const wallet = useAnchorWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n    const rpcUrl = props.rpcHost;\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n            if (!wallet) return;\n\n            const cndy = await getCandyMachineState(\n                wallet as anchor.Wallet,\n                props.candyMachineId,\n                props.connection\n            );\n\n            setCandyMachine(cndy);\n            setItemsAvailable(cndy.state.itemsAvailable);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n\n            var divider = 1;\n            if (decimals) {\n                divider = +('1' + new Array(decimals).join('0').slice() + '0');\n            }\n\n            // detect if using spl-token to mint\n            if (cndy.state.tokenMint) {\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPrice(cndy.state.price.toNumber() / divider);\n                setWhitelistPrice(cndy.state.price.toNumber() / divider);\n            }else {\n                setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n            }\n\n\n            // fetch whitelist token balance\n            if (cndy.state.whitelistMintSettings) {\n                setWhitelistEnabled(true);\n                setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                setIsPresale(cndy.state.whitelistMintSettings.presale);\n                setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                    if (cndy.state.tokenMint) {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                    } else {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                    }\n                }\n\n                let balance = 0;\n                try {\n                    const tokenBalance =\n                        await props.connection.getTokenAccountBalance(\n                            (\n                                await getAtaForMint(\n                                    cndy.state.whitelistMintSettings.mint,\n                                    wallet.publicKey,\n                                )\n                            )[0],\n                        );\n\n                    balance = tokenBalance?.value?.uiAmount || 0;\n                } catch (e) {\n                    console.error(e);\n                    balance = 0;\n                }\n                setWhitelistTokenBalance(balance);\n                setIsActive(isPresale && !isEnded && balance > 0);\n            } else {\n                setWhitelistEnabled(false);\n            }\n\n            // end the mint when date is reached\n            if (cndy?.state.endSettings?.endSettingType.date) {\n                setEndDate(toDate(cndy.state.endSettings.number));\n                if (\n                    cndy.state.endSettings.number.toNumber() <\n                    new Date().getTime() / 1000\n                ) {\n                    setIsEnded(true);\n                    setIsActive(false);\n                }\n            }\n            // end the mint when amount is reached\n            if (cndy?.state.endSettings?.endSettingType.amount) {\n                let limit = Math.min(\n                    cndy.state.endSettings.number.toNumber(),\n                    cndy.state.itemsAvailable,\n                );\n                setItemsAvailable(limit);\n                if (cndy.state.itemsRedeemed < limit) {\n                    setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                } else {\n                    setItemsRemaining(0);\n                    cndy.state.isSoldOut = true;\n                    setIsEnded(true);\n                }\n            } else {\n                setItemsRemaining(cndy.state.itemsRemaining);\n            }\n\n            if (cndy.state.isSoldOut) {\n                setIsActive(false);\n            }\n        })();\n    };\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes+1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any): void {\n        let remaining = itemsRemaining - 1;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - 1;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + 1);\n        const solFeesEstimation = 0.012; // approx\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - (whitelistEnabled ? whitelistPrice : price) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async () => {\n        try {\n            setIsMinting(true);\n            if (wallet && candyMachine?.program && wallet.publicKey && (blacklist.indexOf(wallet.publicKey.toString()) === -1)) {\n                console.log(wallet.publicKey.toString())\n                const mint = anchor.web3.Keypair.generate();\n                const mintTxId = (\n                    await mintOneToken(candyMachine, wallet.publicKey, mint)\n                )[0];\n\n                let status: any = {err: true};\n                if (mintTxId) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        'singleGossip',\n                        true,\n                    );\n                }\n\n                if (!status?.err) {\n                    blacklist.push(wallet.publicKey.toString());\n                    console.log(wallet.publicKey.toString())\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(refreshCandyMachineState, [\n        wallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale\n    ]);\n\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Logo><a href=\"http://spiritualgoats.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"\"\n                                                                                                          src=\"logo.png\"/></a></Logo>\n                    <Menu>\n                    </Menu>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <br/>\n                    <h2>Spiritual Goats Private Mint</h2>\n                    <br/>\n\n                    {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                        <h3>You own {whitelistTokenBalance} WL mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\" }.</h3>}\n                    {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\n                        <h3>Whitelisted GOAT</h3>}\n                    {wallet && isActive && !whitelistEnabled &&\n                    <h3>0.2 SOL</h3>}\n\n                    {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\n                        <Countdown\n                        date={toDate(candyMachine?.state?.endSettings?.number)}\n                        onMount={({completed}) => completed && setIsEnded(true)}\n                        onComplete={() => {\n                            setIsEnded(true);\n                        }}\n                        renderer={renderEndDateCounter}\n                        />}\n                    {wallet && isActive &&\n                        <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                    <br/>\n                    \n                    <MintButtonContainer>\n                        {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\n                            <Countdown\n                                date={toDate(candyMachine?.state.goLiveDate)}\n                                onMount={({completed}) => completed && setIsActive(!isEnded)}\n                                onComplete={() => {\n                                    setIsActive(!isEnded);\n                                }}\n                                renderer={renderGoLiveDateCounter}\n                            />) : (\n                            !wallet ? (\n                                    <ConnectButton>Connect Wallet</ConnectButton>\n                                ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                candyMachine?.state.gatekeeper &&\n                                wallet.publicKey &&\n                                wallet.signTransaction ? (\n                                    <GatewayProvider\n                                        wallet={{\n                                            publicKey:\n                                                wallet.publicKey ||\n                                                new PublicKey(CANDY_MACHINE_PROGRAM),\n                                            //@ts-ignore\n                                            signTransaction: wallet.signTransaction,\n                                        }}\n                                        // // Replace with following when added\n                                        // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                        gatekeeperNetwork={\n                                            candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                        } // This is the ignite (captcha) network\n                                        /// Don't need this for mainnet\n                                        clusterUrl={rpcUrl}\n                                        options={{autoShowModal: false}}\n                                    >\n                                        <MintButton\n                                            candyMachine={candyMachine}\n                                            isMinting={isMinting}\n                                            isActive={isActive}\n                                            isEnded={isEnded}\n                                            isSoldOut={isSoldOut}\n                                            onMint={onMint}\n                                        />\n                                    </GatewayProvider>\n                                ) : (\n                                    <MintButton\n                                        candyMachine={candyMachine}\n                                        isMinting={isMinting}\n                                        isActive={isActive}\n                                        isEnded={isEnded}\n                                        isSoldOut={isSoldOut}\n                                        onMint={onMint}\n                                    />\n                                ) :\n                                <h1>Mint is private.</h1>\n                                )}\n                    </MintButtonContainer>\n                    <br/>\n                    {wallet && isActive && solanaExplorerLink &&\n                        <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solscan</SolExplorerLink>}\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}