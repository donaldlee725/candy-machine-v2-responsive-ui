{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst useGatekeeper = ({\n  wallet,\n  stage,\n  gatekeeperClient\n}, state, dispatch) => {\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  const {\n    gatekeeperNetworkAddress\n  } = state;\n  /**\n   * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n   * and dispatch an event so we know it's in progress\n   */\n\n  const waitForGatekeeperIssuanceRequest = (0, react_1.useCallback)( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async ({\n    payload,\n    proof\n  }) => {\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger_1.default.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n        payload\n      });\n      dispatch({\n        type: 'requestGatekeeperIssuance'\n      });\n      const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n        wallet: connectedWallet,\n        payload,\n        proof\n      });\n      logger_1.default.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n\n      if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n        logger_1.default.error('Error requesting token from gatekeeper');\n        dispatch({\n          type: 'requestGatekeeperIssuanceFailed'\n        });\n        throw new Error('Error requesting token from gatekeeper');\n      }\n\n      logger_1.default.debug('Successfully created gatekeeper token');\n      dispatch({\n        type: 'requestGatekeeperIssuanceComplete'\n      });\n    }\n  }, [gatekeeperClient, expectWalletConnected, stage]);\n  /**\n   * Update the state when the Gatekeeper network changes\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n      dispatch({\n        type: 'gatekeeperNetworkChanged',\n        gatekeeperNetworkAddress\n      });\n    }\n  }, [gatekeeperNetworkAddress]);\n  return {\n    waitForGatekeeperIssuanceRequest,\n    gatekeeperClient\n  };\n};\n\nexports.default = useGatekeeper;","map":{"version":3,"sources":["/media/donald/C/private-mint-frontend/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useGatekeeper.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","useWalletHooks_1","useGatekeeper","wallet","stage","gatekeeperClient","state","dispatch","expectWalletConnected","default","gatekeeperNetworkAddress","waitForGatekeeperIssuanceRequest","useCallback","payload","proof","connectedWallet","debug","type","requestGatewayTokenFromGatekeeperResult","requestGatewayTokenFromGatekeeper","status","error","Error","useEffect","publicKey"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGT,eAAe,CAACQ,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAME,gBAAgB,GAAGV,eAAe,CAACQ,OAAO,CAAC,kBAAD,CAAR,CAAxC;;AACA,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA;AAAjB,CAAD,EAAuCC,KAAvC,EAA8CC,QAA9C,KAA2D;AAC7E,QAAM;AAAEC,IAAAA;AAAF,MAA4B,CAAC,GAAGP,gBAAgB,CAACQ,OAArB,EAA8BN,MAA9B,EAAsCG,KAAtC,EAA6CC,QAA7C,CAAlC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAA+BJ,KAArC;AACA;AACJ;AACA;AACA;;AACI,QAAMK,gCAAgC,GAAG,CAAC,GAAGb,OAAO,CAACc,WAAZ,GACzC;AACA,SAAO;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP,KAA8B;AAC1B,UAAMC,eAAe,GAAGP,qBAAqB,EAA7C;;AACA,QAAIO,eAAJ,EAAqB;AACjBf,MAAAA,QAAQ,CAACS,OAAT,CAAiBO,KAAjB,CAAuB,kFAAvB,EAA2G;AACvGH,QAAAA;AADuG,OAA3G;AAGAN,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,YAAMC,uCAAuC,GAAG,MAAMb,gBAAgB,GAAGc,iCAAnB,CAAqD;AACvGhB,QAAAA,MAAM,EAAEY,eAD+F;AAEvGF,QAAAA,OAFuG;AAGvGC,QAAAA;AAHuG,OAArD,CAAtD;AAKAd,MAAAA,QAAQ,CAACS,OAAT,CAAiBO,KAAjB,CAAuB,yCAAvB,EAAkEE,uCAAlE;;AACA,UAAIA,uCAAuC,CAACE,MAAxC,IAAkD,GAAtD,EAA2D;AACvDpB,QAAAA,QAAQ,CAACS,OAAT,CAAiBY,KAAjB,CAAuB,wCAAvB;AACAd,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACA,cAAM,IAAIK,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACDtB,MAAAA,QAAQ,CAACS,OAAT,CAAiBO,KAAjB,CAAuB,uCAAvB;AACAT,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAvBwC,EAuBtC,CAACZ,gBAAD,EAAmBG,qBAAnB,EAA0CJ,KAA1C,CAvBsC,CAAzC;AAwBA;AACJ;AACA;;AACI,GAAC,GAAGN,OAAO,CAACyB,SAAZ,EAAuB,MAAM;AACzB,QAAIpB,MAAM,IAAIA,MAAM,CAACqB,SAAjB,IAA8Bd,wBAAlC,EAA4D;AACxDH,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAE,0BAAR;AAAoCP,QAAAA;AAApC,OAAD,CAAR;AACH;AACJ,GAJD,EAIG,CAACA,wBAAD,CAJH;AAKA,SAAO;AACHC,IAAAA,gCADG;AAEHN,IAAAA;AAFG,GAAP;AAIH,CA3CD;;AA4CAT,OAAO,CAACa,OAAR,GAAkBP,aAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst useGatekeeper = ({ wallet, stage, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const { gatekeeperNetworkAddress } = state;\n    /**\n     * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n     * and dispatch an event so we know it's in progress\n     */\n    const waitForGatekeeperIssuanceRequest = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async ({ payload, proof }) => {\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n                payload,\n            });\n            dispatch({ type: 'requestGatekeeperIssuance' });\n            const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n                wallet: connectedWallet,\n                payload,\n                proof,\n            });\n            logger_1.default.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n            if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n                logger_1.default.error('Error requesting token from gatekeeper');\n                dispatch({ type: 'requestGatekeeperIssuanceFailed' });\n                throw new Error('Error requesting token from gatekeeper');\n            }\n            logger_1.default.debug('Successfully created gatekeeper token');\n            dispatch({ type: 'requestGatekeeperIssuanceComplete' });\n        }\n    }, [gatekeeperClient, expectWalletConnected, stage]);\n    /**\n     * Update the state when the Gatekeeper network changes\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n            dispatch({ type: 'gatekeeperNetworkChanged', gatekeeperNetworkAddress });\n        }\n    }, [gatekeeperNetworkAddress]);\n    return {\n        waitForGatekeeperIssuanceRequest,\n        gatekeeperClient,\n    };\n};\nexports.default = useGatekeeper;\n"]},"metadata":{},"sourceType":"script"}