{"ast":null,"code":"var _jsxFileName = \"/media/donald/C/candy-machine-v2-responsive-ui/src/MintButton.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n_c = CTAButton;\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  isEnded,\n  isActive,\n  isSoldOut\n}) => {\n  _s();\n\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  useEffect(() => {\n    setIsVerifying(false);\n\n    if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n      // when user approves wallet verification txn\n      setIsVerifying(true);\n    } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      console.log('Verified human, now minting...');\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    disabled: clicked || (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut) || isSoldOut || isMinting || isEnded || !isActive || isVerifying,\n    onClick: async () => {\n      if (isActive && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.gatekeeper) && gatewayStatus !== GatewayStatus.ACTIVE) {\n        console.log('Requesting gateway token');\n        setClicked(true);\n        await requestGatewayToken();\n      } else {\n        console.log('Minting...');\n        await onMint();\n      }\n    },\n    variant: \"contained\",\n    children: !candyMachine ? \"CONNECTING...\" : (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut) || isSoldOut ? 'SOLD OUT' : isActive ? isVerifying ? 'VERIFYING...' : isMinting || clicked ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }, this) : \"MINT\" : isEnded ? \"ENDED\" : (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate) ? \"SOON\" : \"UNAVAILABLE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MintButton, \"VbBD2l3Pa2icV/iebrBiF6YRSSU=\", false, function () {\n  return [useGateway];\n});\n\n_c2 = MintButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"sources":["/media/donald/C/candy-machine-v2-responsive-ui/src/MintButton.tsx"],"names":["styled","useEffect","useState","Button","CircularProgress","GatewayStatus","useGateway","CTAButton","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","requestGatewayToken","gatewayStatus","clicked","setClicked","isVerifying","setIsVerifying","COLLECTING_USER_INFORMATION","ACTIVE","console","log","state","gatekeeper","goLiveDate"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,SAAQC,aAAR,EAAuBC,UAAvB,QAAwC,6BAAxC;;AAIA,OAAO,MAAMC,SAAS,GAAGP,MAAM,CAACG,MAAD,CAAS;AACxC;AACA;AACA;AACA;AACA;AACA,CANO;KAAMI,S;AAQb,OAAO,MAAMC,UAAU,GAAG,CAAC;AACIC,EAAAA,MADJ;AAEIC,EAAAA,YAFJ;AAGIC,EAAAA,SAHJ;AAIIC,EAAAA,OAJJ;AAKIC,EAAAA,QALJ;AAMIC,EAAAA;AANJ,CAAD,KAcpB;AAAA;;AACF,QAAM;AAACC,IAAAA,mBAAD;AAAsBC,IAAAA;AAAtB,MAAuCV,UAAU,EAAvD;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,QAAIJ,aAAa,KAAKX,aAAa,CAACgB,2BAAhC,IAA+DJ,OAAnE,EAA4E;AACxE;AACAG,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD,MAGO,IAAIJ,aAAa,KAAKX,aAAa,CAACiB,MAAhC,IAA0CL,OAA9C,EAAuD;AAC1DM,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAf,MAAAA,MAAM;AACNS,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAVQ,EAUN,CAACF,aAAD,EAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCT,MAArC,CAVM,CAAT;AAYA,sBACI,QAAC,SAAD;AACI,IAAA,QAAQ,EACJQ,OAAO,KACPP,YADO,aACPA,YADO,uBACPA,YAAY,CAAEe,KAAd,CAAoBX,SADb,CAAP,IAEAA,SAFA,IAGAH,SAHA,IAIAC,OAJA,IAKA,CAACC,QALD,IAMAM,WARR;AAUI,IAAA,OAAO,EAAE,YAAY;AACjB,UAAIN,QAAQ,KAAIH,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEe,KAAd,CAAoBC,UAAxB,CAAR,IAA8CV,aAAa,KAAKX,aAAa,CAACiB,MAAlF,EAA0F;AACtFC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAN,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMH,mBAAmB,EAAzB;AACH,OAJD,MAIO;AACHQ,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,cAAMf,MAAM,EAAZ;AACH;AACJ,KAnBL;AAoBI,IAAA,OAAO,EAAC,WApBZ;AAAA,cAsBK,CAACC,YAAD,GACG,eADH,GAEG,CAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEe,KAAd,CAAoBX,SAApB,KAAiCA,SAAjC,GACA,UADA,GAEAD,QAAQ,GACRM,WAAW,GAAG,cAAH,GACPR,SAAS,IAAIM,OAAb,gBACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YADJ,GAGI,MALA,GAORL,OAAO,GAAG,OAAH,GAAc,CAAAF,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEe,KAAd,CAAoBE,UAApB,IACrB,MADqB,GAGrB;AApCR;AAAA;AAAA;AAAA;AAAA,UADJ;AAyCH,CAxEM;;GAAMnB,U;UAeoCF,U;;;MAfpCE,U","sourcesContent":["import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}